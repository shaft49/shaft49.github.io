{"version":3,"sources":["components/sidebar.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","info","href","className","data-toggle","data-target","aria-expanded","aria-controls","id","style","backgroundImage","role","data-nav-section","target","rel","Main","App","type","bg","num","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAgDeA,G,MA9CC,WACZ,IAAMC,EAES,cAFTA,EAGQ,QAGd,OACI,6BACA,6BACE,yBAAKC,KAAK,UAAUC,UAAU,6CAA6CC,cAAY,WAAWC,cAAY,UAAUC,gBAAc,QAAQC,gBAAc,UAAS,6BACrK,2BAAOC,GAAG,iBAAiBL,UAAU,wBACnC,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aAAaM,MAAO,CAACC,gBAAiB,2BACnD,wBAAIF,GAAG,iBAAgB,uBAAGN,KAAK,cAAa,0BAAMC,UAAU,qBAAqBF,GAAsB,0BAAME,UAAU,oBAAoBF,MAE/I,yBAAKO,GAAG,qBAAqBG,KAAK,aAAaR,UAAU,UACvD,yBAAKK,GAAG,SAASL,UAAU,YACzB,4BACE,wBAAIA,UAAU,UAAS,uBAAGD,KAAK,QAAQU,mBAAiB,QAAjC,SACvB,4BAAI,uBAAGV,KAAK,SAASU,mBAAiB,SAAlC,UACJ,4BAAI,uBAAGV,KAAK,cAAcU,mBAAiB,cAAvC,eACJ,4BAAI,uBAAGV,KAAK,UAAUU,mBAAiB,UAAnC,WAEJ,4BAAI,uBAAGV,KAAK,aAAaU,mBAAiB,aAAtC,cACJ,4BAAI,uBAAGV,KAAK,cAAcU,mBAAiB,gBAAvC,oBAMV,yBAAKJ,GAAG,mBACN,yBAAKL,UAAU,cAEb,uBAAGA,UAAU,YAAYD,KAAK,0DAA0DW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,8BAC/I,uBAAGA,UAAU,YAAYD,KAAK,6BAA6BW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,2BAClH,uBAAGA,UAAU,YAAYD,KAAK,2DAA2DW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,yCC1BjJY,MATf,WACI,OACI,yBAAKP,GAAK,iBACN,yBAAKA,GAAK,kBACN,kBAAC,EAAD,SCODQ,MATf,WACE,OACE,6BACE,yBAAKR,GAAG,YAAW,kBAAC,IAAD,CAAaS,KAAK,SAASC,IAAI,EAAMC,IAAK,GAAIC,MAAM,aACvE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.960a7624.chunk.js","sourcesContent":["import React from 'react';\n\nconst Sidebar = () => {\n    const info = {\n        fullname: 'Md Shafiul Islam',\n        firstname: 'Md Shafiul ',\n        lastname: 'Islam'\n    };\n\n    return (\n        <div>\n        <div>\n          <nav href=\"#navbar\" className=\"js-template-nav-toggle template-nav-toggle\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"><i /></nav>\n          <aside id=\"template-aside\" className=\"border js-fullheight\">\n            <div className=\"text-center\">\n              <div className=\"author-img\" style={{backgroundImage: 'url(images/about.jpg)'}} />\n                <h1 id=\"template-logo\"><a href=\"index.html\"><span className=\"sidebar-firstname\">{info.firstname}</span><span className=\"sidebar-lastname\">{info.lastname}</span></a></h1>\n            </div>\n            <nav id=\"template-main-menu\" role=\"navigation\" className=\"navbar\">\n              <div id=\"navbar\" className=\"collapse\">\n                <ul>\n                  <li className=\"active\"><a href=\"#home\" data-nav-section=\"home\">Home</a></li>\n                  <li><a href=\"#about\" data-nav-section=\"about\">About</a></li>\n                  <li><a href=\"#experience\" data-nav-section=\"experience\">Experience</a></li>\n                  <li><a href=\"#skills\" data-nav-section=\"skills\">Skills</a></li>\n                  {/* <li><a href=\"#projects\" data-nav-section=\"projects\">Projects</a></li> */}\n                  <li><a href=\"#education\" data-nav-section=\"education\">Education</a></li>\n                  <li><a href=\"#achievemts\" data-nav-section=\"achievements\">Achievements</a></li>\n                  {/* <li><a href=\"#contact\" data-nav-section=\"contact\">Contact</a></li> */}\n                  {/* <li><a href=\"#\" data-nav-section=\"blog\">Blog</a></li> */}\n                </ul>\n              </div>\n            </nav>\n            <nav id=\"template-footer\">\n              <div className=\"some-links\">\n                {/* <a className=\"some-link\" href=\"mailto:trifiasco@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-mail some-icon\"/></a> */}\n                <a className=\"some-link\" href=\"https://www.linkedin.com/in/md-shafiul-islam-a34587107/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-linkedin2 some-icon\"/></a>\n                <a className=\"some-link\" href=\"https://github.com/shaft49\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-github some-icon\"/></a>\n                <a className=\"some-link\" href=\"https://stackoverflow.com/users/5187318/md-shafiul-islam\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-stackoverflow some-icon\"/></a>\n              </div>\n            </nav>\n          </aside>\n        </div>\n      </div>\n\n    );\n}\n\nexport default Sidebar;","import React from 'react'\nimport Sidebar from '../components/sidebar'\n\nfunction Main() {\n    return(\n        <div id = \"template-page\">\n            <div id = \"container-wrap\">\n                <Sidebar></Sidebar>\n            </div>\n        </div>\n    );\n}\nexport default Main;","import React from 'react';\nimport ParticlesBg from 'particles-bg'\nimport './App.css';\nimport Main from './components/main'\n\nfunction App() {\n  return (\n    <div>\n      <div id=\"particle\"><ParticlesBg type=\"cobweb\" bg={true} num={40} color=\"#000000\"/></div>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}